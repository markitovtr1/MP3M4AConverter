/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.crazycrowd.mp3m4aconverter.utils;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.concurrent.TimeUnit;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;

import lombok.extern.slf4j.Slf4j;

/**
 * Executes shell commands on the OS.
 *
 * @author marcos.romero
 */
@Slf4j
@Singleton
public class ShellCommands {

	/**
	 * Seconds to wait for a shell command to end its execution.
	 *
	 * @author marcos.romero
	 */
	private final Long shellCommandsWaitSeconds;

	@Inject
	public ShellCommands(@Named("shellCommandsWaitSeconds") Long shellCommandsWaitSeconds) {
		this.shellCommandsWaitSeconds = shellCommandsWaitSeconds;
	}

	/**
	 * Calls 'ffmpeg' utility to convert a file to WAVE raw format.
	 *
	 * @param inputFilePath Path to file that is going to be converted to WAVE.
	 *                      Expected to be MP3.
	 * @return Object with paths to WAV and Tag file generated by FFMPEG.
	 * @throws IOException          Thrown by process execution.
	 * @throws InterruptedException Thrown by waiting process to end.
	 * @throws RuntimeException     In case 'ffmpeg' doesn't end in the expected
	 *                              time, or ends with exit value different than 0.
	 * @author marcos.romero
	 */
	public Path ffmpeg(Path inputFilePath) throws IOException, InterruptedException {
		log.debug("Executing ffmpeg on file {}", inputFilePath);
		Path wavPath = PathUtils.changeFileExtension(inputFilePath, FileExtension.WAVE);

		ProcessBuilder pb = new ProcessBuilder("ffmpeg", "-i", "-", "-f", "wav", "-")
				.redirectInput(inputFilePath.toFile()).redirectOutput(wavPath.toFile());

		waitForProcess(pb);
		log.debug("Ffmpeg executed and generated {}", wavPath);
		return wavPath;
	}

	/**
	 * Calls 'neroAacEnc' utility to convert a file to M4A format with default
	 * quality params.
	 *
	 * @param waveFile Wave file that is going to be converted to M4A
	 * @return Path to converted file
	 * @throws IOException          Thrown by process execution.
	 * @throws InterruptedException Thrown by waiting process to end.
	 * @throws RuntimeException     In case neroAacEnc doesn't end in the expected
	 *                              time, or ends with exit value different than 0.
	 * @author marcos.romero
	 */
	public Path neroAacEnc(Path waveFile) throws IOException, InterruptedException {
		log.debug("Executing neroAacEnc on file {}", waveFile);

		File parentDirectory = waveFile.getParent().toFile();
		Path m4aPath = PathUtils.changeFileExtension(waveFile, FileExtension.M4A);

		ProcessBuilder pb = new ProcessBuilder("neroAacEnc", "-ignorelength", "-if", waveFile.getFileName().toString(),
				"-of", m4aPath.getFileName().toString()).inheritIO().directory(parentDirectory);

		waitForProcess(pb);
		log.debug("NeroAacEnc generated file {}", m4aPath);
		return m4aPath;
	}

	/**
	 * Waits for a process to end its execution
	 *
	 * @param builder Builder that's going to generate the process.
	 * @throws IOException          Thrown by ProcessBuilder.start().
	 * @throws InterruptedException Throws while waiting for process execution to
	 *                              end.
	 * @throws RuntimeException     In case process doesn't end in the expected
	 *                              time, or ends with exit value different than 0.
	 * @author marcos.romero
	 */
	private void waitForProcess(ProcessBuilder builder) throws IOException, InterruptedException {
		Process process = builder.start();
		boolean ended = process.waitFor(shellCommandsWaitSeconds, TimeUnit.SECONDS);

		if (!ended) {
			throw new RuntimeException("Process did not end its execution on expected time.");
		}

		if (process.exitValue() != 0) {
			throw new RuntimeException("Process ended with exit value " + process.exitValue());
		}
	}

}
